<?php

use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_render().
 */
function fkg_ct_outcome_views_pre_render(ViewExecutable $view){
  if ($view->id() == 'fkg_outcome_programs' && in_array($view->current_display, ['owned_programs', 'contributing_programs'])) {
    // Sort the programs according to 1) program owner, 2) program number, in a natural order.
    usort($view->result, function ($a, $b){
      $sort_body = strnatcmp($a->node_field_data_node__field_fkg_program__node__field_fkg_pro, $b->node_field_data_node__field_fkg_program__node__field_fkg_pro);
      return $sort_body != 0 ? $sort_body : strnatcmp($a->node_field_data_node__field_fkg_program__node__field_fkg_num, $b->node_field_data_node__field_fkg_program__node__field_fkg_num);
    });
  }
}

/**
 * Implements hook_views_post_execute().
 */
function fkg_ct_outcome_views_post_execute(ViewExecutable $view) {
  // Restrict the result modification to the specified view & display.
  if ($view->id() != 'fkg_outcome_programs' || $view->current_display != 'contributing_to_outcomes') {
    return;
  }

  /**
   * Remove duplicated view output items and the referenced item.
   * 
   * @see config/optional/view.view.fkg_outcome_programs.yml.
   * 
   * @todo Seek a better solution (such as using hook_views_query_alter()).
   */
  $view_result = $view->result;
  $exclude_nid = $view->args[0] ?? null;
  $unique_nids = [];
  $view->result = [];
  foreach ($view_result as $item) {
    $nid = $item->_entity->get('field_fkg_outcome')->getString();
    if ($nid && $nid != $exclude_nid && !in_array($nid, $unique_nids)) {
      $unique_nids[] = $nid;
      $view->result[] = $item;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for template node__fkg_ct_outcome.
 */
function fkg_ct_outcome_preprocess_node__fkg_ct_outcome(&$variables) {
  $content_character_sheet = [
    '#type' => 'container',
    '#weight' => 10,
    '#attributes' => [
      'class' => [
        'field',
        'fkg-character-sheet',
        'fkg-character-sheet-outcome',
      ],
    ],
    '#attached' => [
      'library' => [
        'fkg_display_charsheet/fkg_character_sheet',
        'fkg_ct_program/fkg_charactersheet_outcome_program',
      ],
    ],
  ];

  // Add the contributing programs.
  $content_character_sheet['outcome_programs'] = [
    '#type' => 'container',
    '#weight' => 1,
    '#attributes' => [
      'class' => ['character-sheet-programs'],
    ],
    'outcome_programs' => _fkg_ct_outcome_get_outcome_programs($variables['node']),
  ];

  // Add the contributing programs graph.
  $content_character_sheet['contributing_programs_graph'] = [
    '#type' => 'container',
    '#weight' => 1,
    'label' => [
      '#type' => 'markup',
      '#markup' => '<div class="field__label">' . t('Contributing programs') . '</div>',
    ],
    'graph' => _fkg_ct_outcome_get_contributing_programs_graph($variables['node']),
  ];

  // Add the expense data for the outcome.
  $content_character_sheet['outcome_expense'] = [
    '#type' => 'container',
    '#weight' => 2,
    'label' => [
      '#type' => 'markup',
      '#markup' => '<div class="field__label">' . t('Appropriations') . '</div>',
    ],
    'outcome_expense' => _fkg_ct_outcome_get_outcome_expense($variables['node']),
  ];

  // Add the data of contributing to outcomes.
  $contributing_to_outcomes = _fkg_ct_outcome_get_contributing_to_outcomes($variables['node']);
  if (!empty($contributing_to_outcomes)) {
    $content_character_sheet['contributing_to_outcomes'] = [
      '#type' => 'container',
      '#weight' => 3,
      'label' => [
        '#type' => 'markup',
        '#markup' => '<div class="field__label">' . t('Contributing to other outcomes') . '</div>',
      ],
      'contributing_to_outcomes' => $contributing_to_outcomes + ['#weight' => 2],
    ];
  }

  $variables['content']['fkg-character-sheet'] = $content_character_sheet;
}

/**
 * Retrieve all the FKG Programs those contribute to the given FKG Outcome.
 * 
 * @param NodeInterface $node
 *   The node of a given FKG Outcome content.
 * 
 * @return array
 *   A renderable array with data of contributing FKG Programs.
 */
function _fkg_ct_outcome_get_outcome_programs(NodeInterface $node) {
  $nid_outcome_owner = $node->get('field_bodies')->getString();
  $nid_outcome = $node->id();

  $dom_id_outcome = 'outcome-' . $nid_outcome;
  $params = [
    'owned_programs' => [
      'data-target' => $dom_id_outcome . '-owned-programs',
      'text' => t('Owned programs'),
    ],
    'contributing_programs' => [
      'data-target' => $dom_id_outcome . '-linked-programs',
      'text' => t('Linked programs'),
    ],
  ];

  $output = [];
  foreach (array_keys($params) as $display) {
    $output[$display . '-button'] = [
      '#type' => 'markup',
      '#markup' => Markup::create('
        <div class="fkg-character-sheet-outcome-programs">
          <button class="btn btn-link" type="button", data-toggle="collapse" data-target="#'. $params[$display]['data-target'] . '" aria-expanded="false" aria-controls="' . $params[$display]['data-target'] . '">
            <spam class="collapse-prefix-symbol fas fa-chevron-circle-right"></spam>
            <spam>' . $params[$display]['text'] . '</spam>
          </button>
        </div>
      '),
    ];
    $output[$display . '-programs'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['collapse'],
        'id' => $params[$display]['data-target'], 
      ],
      'programs' => views_embed_view('fkg_outcome_programs', $display, $nid_outcome, $nid_outcome_owner),
    ];
  }

  return $output;
}

/**
 * Retrieve all the Outcomes that the programs associated with a given Outcome contribute to.
 * 
 * @param NodeInterface $node
 *   The node of a given FKG Outcome content.
 * 
 * @return array || []
 *   A renderable array with #type 'view' holding data of contributing to outcomes.
 */
function _fkg_ct_outcome_get_contributing_to_outcomes(NodeInterface $node) {
  $outcome_owner_id = $node->get('field_bodies')->getString();
  $view_results = views_get_view_result('fkg_outcome_programs', 'owned_programs', $node->id(), $outcome_owner_id);

  $view_arg_programs_owned = implode('+',array_map(function ($result) {return $result->_entity->get('field_fkg_program')->getString() ?? NULL;}, $view_results));

  // Retrieve the outcomes that a given outcome's programs contribute to.
  // @see config/optional/views.view.fkg_outcome_programs.yml.
  $view = Views::getView('fkg_outcome_programs');
  $view->setDisplay('contributing_to_outcomes');
  $view->setArguments([$view_arg_programs_owned, $outcome_owner_id]);
  $view->preExecute();
  $view->execute();

  return $view->buildRenderable() ?? [];
}

/**
 * Get the graph of contributing programs for given outcome.
 * 
 * @param NodeInterface $node
 *   The node of a given FKG Outcome content.
 * 
 * @return array
 *   A renderable array holding the data to render the graph of contributing programs.
 */
function _fkg_ct_outcome_get_contributing_programs_graph(NodeInterface $node) {
  $outcome_id = $node->id();
  $outcome_title = $node->getTitle();
  $outcome_owner = Node::load($node->get('field_bodies')->getString())->getTitle();

  $graph_nodes = [];
  $graph_categories = [];
  $graph_links = [];

  // Add the outcome graph node.
  $graph_nodes[] = [
    'symbol' => 'circle',
    'name' => $outcome_title,
    'owner' => $outcome_owner,
    'value' => $outcome_title,
    'id' => $outcome_id,
    'symbolSize' => 30
  ];

  $view_results = views_get_view_result('fkg_outcome_programs', 'owned_programs', $outcome_id);
  $program_owners = array_map(
    function ($element) {
      $program = Node::load($element->_entity->get('field_fkg_program')->getString());
      $program_owner = Node::load($program->get('field_bodies')->getString())->getTitle();
      return [
        'program_nid' => $program->id(),
        'owner' => $program_owner,
      ];
    },
    $view_results
  );
  $owner_names = array_unique(array_column($program_owners, 'owner'));

  // Sort the program owners and place the outcome owner as the first one.
  $owner_names = array_values(array_diff($owner_names,[$outcome_owner]));
  sort($owner_names);
  array_unshift($owner_names, $outcome_owner);

  $owner_names = array_flip($owner_names); // Swap the name and the array index.
  $graph_categories = array_map(
    function($name, $key) {
      return [
        'name' => $name,
        'symbol' => 'Rect',
        'symbolSize' => 16,
      ];
    },
    array_keys($owner_names),
    $owner_names
  );

  // Extract the graph data from the view results.
  foreach($view_results as $row) {
    $contribution_text = $row->_entity->get('field_fkg_description')->value;
    $program = Node::load($row->_entity->get('field_fkg_program')->getString());
    $program_id = $program->id();
    $program_title = $program->getTitle();
    $program_owner = Node::load($program->get('field_bodies')->getString())->getTitle();
    $graph_nodes[] = [
      'category' => $owner_names[$program_owner],
      'owner' => $program_owner,
      'name' => $program_title,
      'value' => $contribution_text,
      'contribution' => $contribution_text,
      'id' => $program_id,
    ];
    $graph_links[] = [
      'source' => $program_id,
      'target' => $outcome_id,
      'select' => [ 'disabled' => TRUE ],
    ];
  }

  // Construct the graph data which will be passed to the JavaScript part.
  $fkg_graph_outcome = [
    'title' => t('Contribution graph for ' . $outcome_title),
    'categories' => $graph_categories,
    'nodes' => $graph_nodes,
    'links' => $graph_links
  ];

  // Prepare the graph dom container.
  $dom_id = 'fkg-graph-outcome-' . $outcome_id;
  return [
    '#type' => 'markup',
    '#markup' => Markup::create(
      "<div id='$dom_id' class='fkg-graph fkg-graph-echarts' data-outcome-id = '$outcome_id' />"
    ),
    '#attached' => [
      'library' => ['fkg_ct_outcome/outcome.graph.echarts'],
      'drupalSettings' => [
        'fkg-graph' => [
          $outcome_id => $fkg_graph_outcome,
        ],
      ],
    ],
  ];
}

/**
 * Get the expense data for given FKG Outcome.
 * 
 * @param NodeInterface $node
 *   The node of a given FKG Outcome content.
 * 
 * @return array
 *   A renderable array with #type 'view' of expense data for the FKG Outcome.
 */
function _fkg_ct_outcome_get_outcome_expense(NodeInterface $node) {
  $view = Views::getView('fkg_expense');
  $view->setDisplay('expense_outcome');
  $view->setArguments([$node->id()]);
  $view->preExecute();
  $view->execute();

  return $view->buildRenderable();
}
